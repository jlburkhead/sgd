// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// gradient_descent
NumericVector gradient_descent(NumericMatrix X, NumericVector y, int max_epoch, double learning_rate, double momentum, bool verbose = false, double tol = 1.0e-7);
RcppExport SEXP sgd_gradient_descent(SEXP XSEXP, SEXP ySEXP, SEXP max_epochSEXP, SEXP learning_rateSEXP, SEXP momentumSEXP, SEXP verboseSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP );
        Rcpp::traits::input_parameter< int >::type max_epoch(max_epochSEXP );
        Rcpp::traits::input_parameter< double >::type learning_rate(learning_rateSEXP );
        Rcpp::traits::input_parameter< double >::type momentum(momentumSEXP );
        Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP );
        Rcpp::traits::input_parameter< double >::type tol(tolSEXP );
        NumericVector __result = gradient_descent(X, y, max_epoch, learning_rate, momentum, verbose, tol);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// shuffle_matrix
NumericMatrix shuffle_matrix(Rcpp::NumericMatrix A);
RcppExport SEXP sgd_shuffle_matrix(SEXP ASEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type A(ASEXP );
        NumericMatrix __result = shuffle_matrix(A);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// sigmoid
NumericVector sigmoid(NumericVector x);
RcppExport SEXP sgd_sigmoid(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP );
        NumericVector __result = sigmoid(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// stochastic_gradient_descent
NumericVector stochastic_gradient_descent(NumericMatrix X, NumericVector y, int max_epoch, double learning_rate, double momentum, int minibatch_size = 100, bool shuffle = true, bool verbose = false, double tol = 1.0e-7);
RcppExport SEXP sgd_stochastic_gradient_descent(SEXP XSEXP, SEXP ySEXP, SEXP max_epochSEXP, SEXP learning_rateSEXP, SEXP momentumSEXP, SEXP minibatch_sizeSEXP, SEXP shuffleSEXP, SEXP verboseSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP );
        Rcpp::traits::input_parameter< int >::type max_epoch(max_epochSEXP );
        Rcpp::traits::input_parameter< double >::type learning_rate(learning_rateSEXP );
        Rcpp::traits::input_parameter< double >::type momentum(momentumSEXP );
        Rcpp::traits::input_parameter< int >::type minibatch_size(minibatch_sizeSEXP );
        Rcpp::traits::input_parameter< bool >::type shuffle(shuffleSEXP );
        Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP );
        Rcpp::traits::input_parameter< double >::type tol(tolSEXP );
        NumericVector __result = stochastic_gradient_descent(X, y, max_epoch, learning_rate, momentum, minibatch_size, shuffle, verbose, tol);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
